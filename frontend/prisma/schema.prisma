// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}

enum LayoutType {
  GRID
  COLLAGE
}

enum ThemeType {
  DARK
  LIGHT
}

enum SafetyType {
  SAFE
  SKETCHY
  UNSAFE
}

model SiteSettings {
  id            Int       @id @default(1)
  setupComplete Boolean   @default(false)
  siteName      String    @default("Imageboard")
  accent        String    @default("#FFBB3D")
  darkerAccent  String    @default("#BB8624")
  deletePosts   Boolean   @default(false)
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  username      String    @unique
  password      String
  role          Role?     @relation(fields: [roleId], references: [id])
  avatar        String?
  description   String?
  preferences   UserPreferences?
  favorites     UserFavorites[]
  votes         Votes[]
  posts         Posts[]
  comments      Comments[]
  commentVotes  CommentVotes[]
  poolVotes     PoolVotes[]
  audits        Audits[]
  roleId        Int?
  
  lastLogin     DateTime  @default(now())
  createdAt     DateTime  @default(now())
}

model UserPreferences {
  id                  String          @id
  user                User            @relation(fields: [id], references: [id], onDelete: Cascade)
  
  layout              LayoutType      @default(GRID)
  theme               ThemeType       @default(DARK)
  postsPerPage        Int             @default(50)
  blurUnsafeEmbeds    Boolean         @default(true)        // Change if NSFW site
  defaultSafety       SafetyType[]    @default([SAFE])      // Change if NSFW site

  blacklistedTags     Tags[]          @relation("UserBLTags")
}

model UserFavorites {
  id        Int      @id @default(autoincrement())
  userId    String
  postId    Int

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Posts    @relation(fields: [postId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId, postId])
}

model Votes {
  id        Int      @id @default(autoincrement())
  postId    Int
  userId    String
  type      VoteType
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Posts    @relation(fields: [postId], references: [id], name: "PostVotes", onDelete: Cascade)

  @@unique([postId, userId])
}

model Role {
  id            Int              @id @default(autoincrement())
  name          String           @unique
  index         Int              @default(1)
  users         User[]
  permissions   Permission[]     @relation("RolePermissions")
  color         String?
  isDefault     Boolean          @default(false)
}

model Permission {
  id            Int              @id @default(autoincrement())
  name          String           @unique
  roles         Role[]           @relation("RolePermissions")
}

model Posts {
  id            Int                 @id @default(autoincrement())
  fileExt       String
  previewPath   String?
  aspectRatio   Float?
  uploadedBy    User                @relation(fields: [uploadedById], references: [id], onDelete: Cascade)
  anonymous     Boolean
  safety        SafetyType
  tags          Tags[]              @relation("PostTags")
  pools         PoolItems[]
  relatedTo     PostRelation[]      @relation("RelatedTo")
  relatedFrom   PostRelation[]      @relation("RelatedFrom")
  sources       String[]
  notes         String?
  flags         String[]
  previewScale  Int?
  pHash         String?
  dupeBypass    Boolean             @default(false)

  score         Int                 @default(0)
  votes         Votes[]             @relation("PostVotes")
  comments      Comments[]          @relation("PostComments")
  favoritedBy   UserFavorites[]
  specialPosts  SpecialPosts[]
  uploadedById  String
  fileSize      Int?

  createdAt     DateTime     @default(now())

  @@index([uploadedById, createdAt])
  @@index([safety, createdAt])
  @@index([safety])
}

model PostRelation {
  fromId        Int
  toId          Int

  from          Posts @relation("RelatedFrom", fields: [fromId], references: [id], onDelete: Cascade)
  to            Posts @relation("RelatedTo", fields: [toId], references: [id], onDelete: Cascade)

  @@id([fromId, toId])
}

model Comments {
  id         Int                @id @default(autoincrement())
  postId     Int
  author     User               @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId   String
  content    String
  isEmbed    Boolean            @default(false)
  score      CommentVotes[]
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt

  post       Posts              @relation(fields: [postId], references: [id], name: "PostComments", onDelete: Cascade)
}

model CommentVotes {
  id         Int      @id @default(autoincrement())
  userId     String
  commentId  Int
  vote       Int

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment    Comments @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId])
}


model Tags {
  id             Int                @id @default(autoincrement())
  name           String             @unique
  description    String?
  
  categoryId     Int
  category       TagCategories      @relation(fields: [categoryId], references: [id])
  
  aliases        TagAlias[]
  posts          Posts[]            @relation("PostTags")

  implications   Tags[]             @relation("TagImplies")
  impliedBy      Tags[]             @relation("TagImplies")

  suggestions    Tags[]             @relation("TagSuggestions")
  suggestedBy    Tags[]             @relation("TagSuggestions")

  blacklistBy    UserPreferences[]  @relation("UserBLTags")

  createdAt      DateTime           @default(now())

  @@index([name])
}

model TagAlias {
  id      Int    @id @default(autoincrement())
  alias   String @unique
  tagId   Int
  tag     Tags   @relation(fields: [tagId], references: [id], onDelete: Cascade)
}

model TagCategories {
  id         Int          @id @default(autoincrement())
  name       String       @unique
  color      String
  order      Int          @default(autoincrement())
  tags       Tags[]
  isDefault  Boolean      @default(false)

  updatedAt  DateTime     @updatedAt
}

model SpecialPosts {
  id        Int      @id @default(autoincrement())
  label     String   @unique
  postId    Int
  post      Posts    @relation(fields: [postId], references: [id])

  createdAt DateTime @default(now())
}

enum AuditCategory {
  EDIT
  DELETE
  CREATE
  UPDATE
  ARCHIVE
}

enum AuditAction {
  POST
  COMMENT
  PROFILE
  TAG
  CATEGORY
  SITE_SETTINGS
  ROLE
  FEATURE
}

model Audits {
  executedAt    DateTime        @default(now())
  category      AuditCategory
  actionType    AuditAction
  details       String?
  address       String?
  userId        String
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([executedAt, userId])
  @@index([category, actionType])
}

model Pools {
  id            Int             @id @default(autoincrement())
  name          String          @unique
  items         PoolItems[]

  artist        String?
  description   String?
  safety        SafetyType
  yearStart     Int?
  yearEnd       Int?

  score         Int             @default(0)
  votes         PoolVotes[]     @relation("PoolVotes")
  
  lastEdited    DateTime        @default(now())
  createdAt     DateTime        @default(now())
}

model PoolItems {
  id            Int             @id @default(autoincrement())
  index         Int
  pool          Pools           @relation(fields: [poolId], references: [id])
  post          Posts           @relation(fields: [postId], references: [id])
  notes         String?

  postId        Int
  poolId        Int

  @@unique([poolId, postId])
  @@unique([poolId, index])
  @@index([poolId, index])
}

model PoolVotes {
  id        Int      @id @default(autoincrement())
  poolId    Int
  userId    String
  vote      Int

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  pool      Pools    @relation(fields: [poolId], references: [id], name: "PoolVotes", onDelete: Cascade)

  @@unique([poolId, userId])
}

model ImportSession {
  id          String        @id @default(cuid())
  userId      String
  type        String        // "SZURU", etc.
  status      String        @default("PENDING")
  createdAt   DateTime      @default(now())
  completedAt DateTime?
  duration    Int?
  logs        ImportLog[]
}

model ImportLog {
  id         Int          @id @default(autoincrement())
  sessionId  String
  session    ImportSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  message    String
  level      String
  timestamp  DateTime     @default(now())
}
