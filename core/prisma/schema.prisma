// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}

enum LayoutType {
  GRID
  COLLAGE
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  username      String    @unique
  password      String
  role          String    @default("Member")
  avatar        String?
  preferences   UserPreferences?
  
  lastLogin     DateTime  @default(now())
  createdAt     DateTime  @default(now())
}

model UserPreferences {
  id            String       @id
  user          User         @relation(fields: [id], references: [id])
  
  layout        LayoutType   @default(GRID)
}

model Posts {
  id            Int          @id @default(autoincrement())
  fileName      String
  uploadedBy    String
  anonymous     Boolean
  safety        String
  tags          String[]
  sources       String[]
  notes         String?
  flags         String[]
  previewScale  Int?

  score         Int          @default(0)
  votes         Votes[]      @relation("PostVotes")
  comments      Comments[]   @relation("PostComments")

  createdAt     DateTime     @default(now())
}

model Votes {
  id        Int      @id @default(autoincrement())
  postId    Int
  userId    String
  type      VoteType
  createdAt DateTime @default(now())

  post      Posts    @relation(fields: [postId], references: [id], name: "PostVotes", onDelete: Cascade)

  @@unique([postId, userId])
}

model Comments {
  id         Int       @id @default(autoincrement())
  postId     Int
  authorId   String
  content    String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  post       Posts     @relation(fields: [postId], references: [id], name: "PostComments", onDelete: Cascade)
}

model TagCategories {
  id         Int          @id @default(autoincrement())
  name       String
  color      String
  order      Int?
  tags       Tags[]

  updatedAt  DateTime     @updatedAt
}

model Tags {
  id            Int       @id @default(autoincrement())
  names         String[]

  categoryId    Int
  category      TagCategories @relation(fields: [categoryId], references: [id])

  implications  Tags[]    @relation("TagImplications")
  impliedBy     Tags[]    @relation("TagImplications")

  suggestions   Tags[]    @relation("TagSuggestions")
  suggestedBy   Tags[]    @relation("TagSuggestions")

  updatedAt     DateTime  @updatedAt
}